import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np
import os
from huggingface_hub import hf_hub_download

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
st.set_page_config(
    page_title="What's That Derm? - AI Skin Lesion Classifier",
    page_icon="üî¨",
    layout="centered",
    initial_sidebar_state="auto",
)

# --- ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°) ---
CLASS_NAMES = {
    'akiec': 'Actinic Keratoses (‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î)',
    'bcc': 'Basal Cell Carcinoma (‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏ö‡∏ã‡∏±‡∏•‡πÄ‡∏ã‡∏•‡∏•‡πå)',
    'bkl': 'Benign Keratosis-like Lesions (‡∏£‡∏≠‡∏¢‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏´‡∏π‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á)',
    'df': 'Dermatofibroma (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏á‡∏≠‡∏Å‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏≤‡πÇ‡∏ï‡πÑ‡∏ü‡πÇ‡∏ö‡∏£‡∏°‡∏≤)',
    'mel': 'Melanoma (‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏°‡∏•‡∏≤‡πÇ‡∏ô‡∏°‡∏≤)',
    'nv': 'Melanocytic Nevi (‡πÑ‡∏ù)',
    'vasc': 'Vascular Lesions (‡∏£‡∏≠‡∏¢‡πÇ‡∏£‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î)'
}

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ---

@st.cache_resource
def load_model():
    try:
        model_path = hf_hub_download(
            repo_id="Meeew/what-that-derm-showcase",   # üîπ ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô model repo ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            filename="best_resnet_model.keras"
        )
        model = tf.keras.models.load_model(model_path)
        return model
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
        return None

def preprocess_image(image):
    """
    ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    """
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Input size ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    img = image.resize((160, 160))
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Numpy array
    img_array = np.array(img)
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° dimension ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch
    img_array = np.expand_dims(img_array, axis=0)
    # ‡∏ó‡∏≥ Normalization
    img_array = img_array / 255.0
    return img_array

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ---

st.title("üî¨ What's That Derm?")
st.markdown("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ö‡∏ô‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI")
st.markdown("---")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = load_model()

if model is not None:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    uploaded_file = st.file_uploader(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ö‡∏ô‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
        type=["jpg", "jpeg", "png"]
    )

    if uploaded_file is not None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        image = Image.open(uploaded_file)
        st.image(image, caption='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î', use_column_width=True)

        with st.spinner('AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...'):
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            processed_image = preprocess_image(image)

            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
            predictions = model.predict(processed_image)
            score = tf.nn.softmax(predictions[0])
            
            # ‡∏´‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            class_index = np.argmax(score)
            class_key = list(CLASS_NAMES.keys())[class_index]
            predicted_class_name = CLASS_NAMES[class_key]
            confidence = 100 * np.max(score)

        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:")
        st.success(f"**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:** {predicted_class_name}")
        st.info(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:** {confidence:.2f}%")

        # (Creative Tip) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
        if predicted_class_name == 'Melanoma':
             st.warning("‡∏£‡∏≠‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏•‡∏≤‡πÇ‡∏ô‡∏°‡∏≤ ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á **‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**")
        elif predicted_class_name == 'Basal Cell Carcinoma':
            st.warning("‡∏£‡∏≠‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏ö‡∏ã‡∏±‡∏•‡πÄ‡∏ã‡∏•‡∏•‡πå **‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**")

# (Error Prevention & Empathy) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
st.markdown("---")
st.error(
    "**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô "
    "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ**‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÑ‡∏î‡πâ "
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
)
